from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.filters.callback_data import CallbackData
from aiogram import F
from hashlib import md5

from loader import dp, db, bot
from filters import IsAdmin, MyFilter
from states import CategoryState, ProductState
from keyboards import back_markup


cancel_message = 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å'
add_product = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
delete_category = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
back_message = 'üëà –ù–∞–∑–∞–¥'
all_right_message = '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ'
back_category_list_message = 'üëà –ö —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
settings = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class Category_cb(CallbackData, prefix='category'):
    id: str
    action: str

# –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
class Product_cb(CallbackData, prefix='product'):
    id: str
    action: str


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥—Ä–∏–π
@dp.message(IsAdmin(), MyFilter(settings))
async def process_settings(message: Message):
    builder = InlineKeyboardBuilder()

    for idx, title in db.fetchall('SELECT * FROM categories'):
        builder.button(text=title, callback_data=Category_cb(id=idx, action='view'))

    builder.add(InlineKeyboardButton(
        text='+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 
        callback_data='add_category'
        ))
    
    builder.adjust(1) # –†–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    await message.answer(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', reply_markup=builder.as_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(IsAdmin(), F.data == 'add_category')
async def add_category_callback_handler(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer(text='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?')
    await state.set_state(CategoryState.title)


# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±–æ–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
@dp.message(IsAdmin(), CategoryState.title)
async def set_category_title_handler(message: Message, state: FSMContext):
    category = message.text
    idx = md5(category.encode('utf-8')).hexdigest() # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ id
    db.query('INSERT INTO categories VALUES (?, ?)', (idx, category)) 

    # –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.clear()
    await process_settings(message)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(IsAdmin(), Category_cb.filter(F.action == 'view'))
async def category_callback_handler(
    query: CallbackQuery,
    callback_data: Category_cb,
    state: FSMContext,
    ):
    category_idx = callback_data.id

    products = db.fetchall(
        '''SELECT * FROM products product WHERE product.tag = 
        (SELECT title FROM categories WHERE idx=?)''',
        (category_idx,)
    )

    await query.message.delete()
    await query.message.answer('–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await state.update_data(category_index=category_idx) # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await show_products(query.message, products, category_idx) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_products(message: Message, product, category_idx):
    await bot.send_chat_action(chat_id=message.from_user.id, action='typing')
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for idx, title, body, image, price, tag in product:
        text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.'

        markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=Product_cb(id=idx, action='delete').pack())]])

        await message.answer_photo(photo=BufferedInputFile(image, filename='image'), caption=text, reply_markup=markup)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=add_product), KeyboardButton(text=delete_category)], [KeyboardButton(text=back_category_list_message)]], 
        resize_keyboard=True,
        )
    
    await message.answer(
        '–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?', 
        reply_markup=markup
        )

# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message(IsAdmin(), F.text == back_category_list_message)
async def back_category_list_handler(message: Message):
    await process_settings(message)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(IsAdmin(), F.text == delete_category)
async def delete_category_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if 'category_index' in data.keys():
        idx = data['category_index']

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
        db.query(
            '''DELETE FROM products WHERE tag IN (SELECT title FROM categories
            WHERE idx=?)''', (idx,)
        )

        # –£–¥–∞–µ–ª–∏–Ω–∏–µ –∫–µ–≥–æ—Ä–∏–∏
        db.query('DELETE FROM categories WHERE idx=?', (idx,))

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
        await process_settings(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(IsAdmin(), F.text == add_product)
async def process_add_product(message: Message, state: FSMContext):
    await state.set_state(ProductState.title) # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=cancel_message)]], resize_keyboard=True)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=markup)


# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(IsAdmin(), F.text == cancel_message, ProductState.title)
async def process_cancel(message: Message, state: FSMContext):
    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
    await state.clear()

    await process_settings(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@dp.message(IsAdmin(), ProductState.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text) # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.set_state(ProductState.body) # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=back_markup())

# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ 
@dp.message(IsAdmin(), F.text == back_message)
async def process_title_back(message: Message, state: FSMContext):
    await process_add_product(message, state=state)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(IsAdmin(), ProductState.body)
async def process_body(message: Message, state: FSMContext):
    await state.update_data(body=message.text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.set_state(ProductState.image) # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=back_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@dp.message(IsAdmin(), ProductState.image, F.photo)
async def process_image_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id # [-1] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª—É—á—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    file_info = await bot.get_file(file_id=file_id) # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ

    downloaded_file = (await bot.download_file(file_path=file_info.file_path)).read() # –§–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ

    await state.update_data(image=downloaded_file)

    await state.set_state(ProductState.price)
    await message.answer(text='–¶–µ–Ω–∞?', reply_markup=back_markup())
    

# –¶–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.message(IsAdmin(), ProductState.price, F.text.isdigit())
async def process_price(message: Message, state: FSMContext):
    data = await state.get_data() # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    price = data['price'] = message.text # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(price=price)
    await state.set_state(ProductState.confirm)

    title = data['title']
    body = data['body']
    image = data['image']

    text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π'

    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=back_message), KeyboardButton(text=all_right_message)]], resize_keyboard=True)

    await message.answer_photo(photo=BufferedInputFile(image, filename='image'), caption=text, reply_markup=markup)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É
@dp.message(IsAdmin(), ProductState.confirm, F.text == all_right_message)
async def process_confirm(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    title = data['title']
    body = data['body']
    image = data['image']
    price = data['price']


    await state.clear() # –û—á–∏—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    tag = db.fetchall(
        'SELECT title FROM categories WHERE idx=?', (data['category_index'],)
    )[0][0] # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–µ–∂, –ø–æ–ª—É—á–∞–µ–º –∑–∞–Ω–µ—á–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ

    idx = md5(''.join([title, body, price, tag]
                      ).encode()).hexdigest() # –•—ç—à–∏—Ä—É–µ–º

    db.query(
        'INSERT INTO products VALUES (?, ?, ?, ?, ?, ?)', 
        (idx, title, body, image, int(price), tag,)
        )

    await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
    await process_settings(message)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query(IsAdmin(), Product_cb.filter(F.action == 'delete'))
async def delete_product_callback_handler(query: CallbackQuery, callback_data: Product_cb):
    product_idx = callback_data.id # id –∏–∑ callback

    db.query('DELETE FROM products WHERE idx=?', (product_idx,))

    await query.message.answer(text='–£–¥–∞–ª–µ–Ω–æ!')
    await query.message.delete()