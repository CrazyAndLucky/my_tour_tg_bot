from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile, CallbackQuery, ReplyKeyboardRemove, LinkPreviewOptions, MessageEntity
from aiogram import F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from hashlib import md5

from loader import dp, db, bot
from shop_bot.filters import IsAdmin
from shop_bot.keyboards.default.markups import accounts, orders, add_account, admins, mailling
from shop_bot.states import ProductState, Add_admin_state, Del_admin_state, Mailling_state
# from shop_bot.app import cmd_start


main_admin_id = 1366711027


# –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
@dp.message(IsAdmin(), (F.text == admins))
async def process_setting_admin(message: Message, state: FSMContext):
    text_admins = '<b>–ê–î–ú–ò–ù–´</b>\n\n' # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤
    
    # –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã –∞–¥–º–∏–Ω–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for admin_id in await db.fetchall('SELECT * FROM admins'):
        admin = await bot.get_chat(admin_id[0])
        
        text_admins += f'{admin.first_name} {admin.id}\n'
    
    
    await message.answer(text=text_admins, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='add_admin')],
        [InlineKeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='del_admin')]
        ]))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@dp.callback_query(IsAdmin(), (F.data == 'add_admin'))
async def process_add_admin(query: CallbackQuery, state: FSMContext):
    await state.set_state(Add_admin_state.name)
    await query.message.answer(text='–í–≤–µ–¥–∏ –∏–¥')


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@dp.message(IsAdmin(), Add_admin_state.name)
async def process_save_admin(message: Message, state: FSMContext):
    try:
        usr_id = (await bot.get_chat(chat_id=int(message.text))).id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–∞
        await db.query('DELETE FROM users WHERE cid = ?', (usr_id,))
        await db.query('INSERT INTO admins VALUES (?)', (usr_id,))
        await state.clear() # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å

        await message.answer(text='–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω')
        
        await bot.send_message(chat_id=usr_id, text='‚≠êÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω! <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª—Å—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>')
        
    except Exception:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')


# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@dp.callback_query(IsAdmin(), (F.data == 'del_admin'))
async def process_del_admin(query: CallbackQuery, state: FSMContext):
    await state.set_state(Del_admin_state.name)
    await query.message.answer(text='–í–≤–µ–¥–∏ –∏–¥')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
@dp.message(IsAdmin(), Del_admin_state.name)
async def process_save_admin(message: Message, state: FSMContext):
    try:
        usr_id = (await bot.get_chat(chat_id=int(message.text))).id
        
        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await db.query('DELETE FROM admins WHERE cid = ?', (usr_id,))
        await db.query('INSERT INTO users VALUES (?, 1)', (usr_id,))
        await state.clear()

        await message.answer(text='–ê–¥–º–∏–Ω —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω')
        # await cmd_start(message, state)
        
    except Exception:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')



# –†–∞—Å—Å—ã–ª–∫–∞
@dp.message(IsAdmin(), (F.text == mailling))
async def process_mailling(message: Message):
    # –î–æ—Å—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = await db.fetchall('SELECT cid FROM users WHERE status = 1')
    len_active_users = len(active_users)
    # –î–æ—Å—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
    non_users = active_users = await db.fetchall('SELECT cid FROM users WHERE status = 0')
    len_non_users = len(non_users)

    await message.answer(
        text=f'‚ùï–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - {len_active_users + len_non_users}\n‚ùï–ê–∫—Ç–∏–≤–Ω—ã—Ö - {len_active_users}\n‚ùï–í –±–ª–æ–∫–µ - {len_non_users}',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='add_mailling')]])
        )
    
# –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(IsAdmin(), (F.data == 'add_mailling'))
async def add_message(query: CallbackQuery, state: FSMContext):
    await query.message.answer(text='–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    
    await state.set_state(Mailling_state.message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(IsAdmin(), Mailling_state.message)
async def process_save_admin(message: Message, state: FSMContext):
    await message.answer(text='‚¨áÔ∏è –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ‚¨áÔ∏è')
    await message.answer(
        text=message.text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚òëÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='confirm_mailling')],
            [InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='stop_mailling')]
            ]),
        entities=message.entities,
        parse_mode=None
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.update_data(text=message.text)
    await state.update_data(entities=message.entities) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑—Å–µ—Ç–∞–∫—É –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏


# –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(IsAdmin(), (F.data == 'confirm_mailling'))
async def start_mailling(query: CallbackQuery, state: FSMContext):
    # –î–æ—Å—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = await db.fetchall('SELECT cid FROM users WHERE status = 1')
    
    await query.message.delete()

    await query.message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å')
    
    # –î–æ—Å—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    data: dict = await state.get_data()
    await state.clear()

    text_mailling = data['text']
    # –†–∞–∑–º–µ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    entities = data['entities']

    # –ë–µ–∂–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    sending = []
    for active_user in active_users:
        try:
            await bot.send_message(
                chat_id=active_user[0], 
                text=text_mailling, 
                link_preview_options=LinkPreviewOptions(is_disabled=True),
                entities=entities,
                parse_mode=None
                )
            sending.append(active_user[0])
        except Exception as e:
            await db.query('UPDATE users SET status = 0')
        
    # –ü–∏—à–µ–º –æ—Ç—á–µ—Ç
    len_sending = len(sending)
    await query.message.answer(
        text=f'‚úÖ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ‚úÖ\n\n–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ - {len_sending}'
    )


# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(IsAdmin(), (F.data == 'stop_mailling'))
async def stop_mailling(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
    await process_mailling(query.message)