from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile, CallbackQuery
from aiogram import F
from aiogram.filters.callback_data import CallbackData

from shop_bot.filters import IsUser
from shop_bot.keyboards.default.markups import accounts, back_message, confirm_message, reviews, reference, help_button, orders
from shop_bot.keyboards import confirm_markup, menu_user_markup, back_markup
from loader import db, dp, bot


id_notification = 1366711027

reviews_message = '‚ôªÔ∏è –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ - @...\n‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª - @...'
reference_message = '''
<b>–ö–ê–ö –ü–†–û–ò–°–•–û–î–ò–¢ –ü–†–û–¶–ï–°–° –ü–û–ö–£–ü–ö–ò</b>

üî∂ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –µ–≥–æ.
üî∂ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –≤ —Ä–∞–±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ä—É—á–Ω—É—é.
...
'''
help_message = 'üíé –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - @...'


class Product_cb(CallbackData, prefix='product'):
    idx: str
    action: str

class Pay_cb(CallbackData, prefix='pay'):
    idx: str
    action: str


# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –ø—Ä–æ–¥–∞–∂–µ
@dp.message(IsUser(), F.text == accounts)
async def process_user_account_show(message: Message):
    # –î–æ—Å—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã
    accounts = await db.fetchall('SELECT * FROM products')

    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –µ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–µ
    if len(accounts) != 0:
        await message.answer(text='<b>üîΩ–¢–û–í–ê–†–´ –í –ü–†–û–î–ê–ñ–ïüîΩ</b>')

        for idx, _, body, photo, price, _ in accounts:
            text = f'{price}—Ä—É–±.\n\n{body}'

            await message.answer_photo(
                photo=BufferedInputFile(file=photo, filename='image'),
                caption=text, 
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data=Product_cb(idx=idx, action='buy_account').pack())]]),
                )
    else:
        await message.answer(text='‚òπÔ∏è –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∂–µ')
            

# –ù–∞–∂–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
@dp.callback_query(IsUser(), Product_cb.filter(F.action == 'buy_account'))
async def process_buy_account(query: CallbackQuery, callback_data: Product_cb):      
    await query.message.delete()
    idx = callback_data.idx

    account = await db.fetchone('SELECT * FROM products WHERE idx = ?', (idx,))
    
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —É–∂–µ –Ω–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ
    if len(account) != 0:
        body = account[2]
        photo = account[3]
        price = account[4]
        
        text = f'{price}\n\n{body}'

        await query.message.answer_photo(
            photo=BufferedInputFile(file=photo, filename='image'),
            caption=text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', callback_data=Pay_cb(idx=idx, action='pay_link').pack())],
                    ]
                ))
    
    else:
        await query.message.answer(text='–≠—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —É–∂–µ –Ω–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ')
        await query.message.delete()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
@dp.callback_query(IsUser(), Pay_cb.filter(F.action == 'pay_link'))
async def process_get_linc(query: CallbackQuery, callback_data: Pay_cb):
    idx = callback_data.idx
    
    await query.message.answer(text=f'–ü—Ä–∏–≤–µ—Ç! –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É: https/...\n\n' + 
                            '<b>–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É" –¢–æ–≥–¥–∞ —Ç–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ä–∞–±–æ—Ç—É.</b>\n\n',
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text='üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É', callback_data='1')],
                                [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É',callback_data=Product_cb(idx=idx, action='pay').pack())]
                                ])
                            )


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É
@dp.callback_query(IsUser(), Product_cb.filter(F.action == 'pay'))
async def process_pay(query: CallbackQuery, callback_data: Product_cb):
    await query.message.answer(text='–ó–∞–∫–∞–∑ –ø–æ—Å—Ç—É–ø–∏–ª –≤ —Ä–∞–±–æ—Ç—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω: @...')
    idx = callback_data.idx
    # –î–æ—Å—Ç–∞—é –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã
    account = await db.fetchone('SELECT * FROM products WHERE idx = ?', (idx,))
    
    title = account[1]
    body = account[2]
    photo = account[3]
    price = account[4]
    pay_link = account[5]

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∑–∞–∫–∞–∑—ã
    await db.query(
        'INSERT INTO orders VALUES (?, ?, ?, ?, ?, ?, ?)', 
        (query.message.chat.id, idx, title, body, photo, price, pay_link)
        )
    
        # –£–¥–∞–ª—è–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–∏
    await db.query('DELETE FROM products WHERE idx = ?', (idx,))

    
    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admins = await db.fetchall('SELECT * FROM admins')
    for admin in admins:
        await bot.send_message(chat_id=admin[0], text='<b>–ü–û–°–¢–£–ü–ò–õ –ù–û–í–´–ô –ó–ê–ö–ê–ó</b>')



# # –û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
# @dp.message(IsUser(), F.text == back_message)
# async def back_account(message: Message):
#     await message.answer(text='–û—Ç–º–µ–Ω–∞', reply_markup=menu_user_markup())

#     await process_user_account_show(message)

# # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
# @dp.message(IsUser(), F.text == confirm_message)
# async def confirm_account(message: Message):
#     pass


# –ö–Ω–æ–ø–∫–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏
@dp.message(IsUser(), F.text == reviews)
async def reviews_button(message: Message):
    await message.answer(text=reviews_message)


# –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∞
@dp.message(IsUser(), F.text == reference)
async def reference_button(message: Message):
    await message.answer(text=reference_message)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â—å
@dp.message(IsUser(), F.text == help_button)
async def reference_button(message: Message):
    await message.answer(text=help_message)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(IsUser(), F.text == orders)
async def orders_button(message: Message):
    usr_orders = await db.fetchall('SELECT * FROM orders WHERE cid = ?', (message.chat.id,))
    if len(usr_orders) == 0:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ :(')
    else:

        for usr_order in usr_orders:
            body = usr_order[3]
            photo = usr_order[4]
            price = usr_order[5]
            
            text = f'{price}—Ä—É–±.\n\n{body}\n\n<b>–ó–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ, –µ–≥–æ –≤–∞–º –≤—ã–¥–∞–µ—Å—Ç @...</b>'           

            await message.answer_photo(
                photo=BufferedInputFile(file=photo, filename='image'),
                caption=text
                )