import os

from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, Message, LinkPreviewOptions
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from loader import dp, bot
from tg_spamer.functions import spam_message_button
from tg_spamer.clients import config, links_manager, accounts_manager



class MyForm(StatesGroup, prefix='links'):
    link = State()

class MyCallback(CallbackData, prefix='spam_biutton'):
    spam: str
    action: str



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 
@dp.callback_query(F.data == 'button_spam_settings')
async def button_spam_settings(query: CallbackQuery, state: FSMContext):
    await state.clear()
    links = links_manager.get_all_links()

    if links:
        markup =  InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='choice_spam_button')],
            [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data='add_linck')],
            [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å–ª—ã–∫–∏', callback_data='dell_lincks')],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='back')],
        ])
    
    else: 
        markup =  InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data='add_linck')],
            [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å–ª—ã–∫–∏', callback_data='dell_lincks')],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='back')],
        ])
    

    text = '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±–µ—â–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏:</b>\n'
    for link in links:
        text += f'{link[1]}{link[2]} –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {link[3]}\n'

    await query.message.edit_text(
        text=text,
        reply_markup=markup,
        link_preview_options=LinkPreviewOptions(is_disabled=True)
        )
    


# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == 'choice_spam_button')
async def choice_spam_button(query : CallbackQuery, state: FSMContext):
    accounts = accounts_manager.get_all_acc_info_by_status('–≥–æ—Ç–æ–≤')
    if accounts:
        text = '<b>‚¨áÔ∏è–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –° –ö–ù–û–ü–ö–û–ô‚¨áÔ∏è</b>\n'
        for account in accounts:
            text += f'| {account[0]} | –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π | {account[6]} |\n'


        dual_message = config.dual_message()
        if dual_message == 1:
            text += '\n–î–≤–æ–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ‚úÖ'
        else:
            text += '\n–î–≤–æ–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ‚ùå'

        await query.message.edit_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='ü§ñ –†–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ PostBot', callback_data=MyCallback(spam='confirm_spam_button', action='postbot').pack())],
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='button_spam_settings')],
            ])
        )

    else: 
        await query.answer(text='–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', show_alert=True)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(MyCallback.filter(F.spam == 'confirm_spam_button'))
async def confirm_spam_button(query: CallbackQuery, state: FSMContext, callback_data: MyCallback):
    if callback_data.action == 'link':
        text = '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–ª–∫—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—Å—ã–ª–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞?'
        callback = MyCallback(spam='start_spam_button', action='link').pack()
    else: 
        text = '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–ª–∫—É —á–µ—Ä–µ–∑ PostBot?'
        callback = MyCallback(spam='start_spam_button', action='postbot').pack()


    await query.message.answer(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∞—Ç—å', callback_data=callback)],
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='choice_spam_button')],
            ])
        )


# –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
@dp.callback_query(MyCallback.filter(F.spam == 'start_spam_button'))
async def start_spam_button(query: CallbackQuery, state: FSMContext, callback_data: MyCallback):
    # config.clear_log_file()
    dual_send = config.dual_message()

    # –°–æ—Ö—Ä–∞–Ω—è—é —Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
    spam_accounts = accounts_manager.get_unique_id_by_status(status='–≥–æ—Ç–æ–≤')

    await query.message.edit_text(text='–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
    if callback_data.action == 'link':
        await spam_message_button([query.from_user.username,], dual_send)
    else:
        await spam_message_button([query.from_user.username,], dual_send, postbot=True)

    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–º
    text = f'<b>–ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É</b> | {config.get_count_send_msg()} |\n'
    for spam_account in spam_accounts:
        account_info = accounts_manager.get_acc_info_by_unique_id(spam_account)
        if account_info is None:
            text += '<i>–ó–∞–±–∞–Ω–µ–Ω</i>\n'
        else:
            text += f'<i>{spam_account}</i> - | {account_info[7]} |\n'

    # await query.message.answer(text=text)
    await query.message.answer_document(document=FSInputFile(path='tg_spamer/logs.txt'), caption=text)



# –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
@dp.callback_query(F.data == 'add_linck')
async def add_linck(query: CallbackQuery, state: FSMContext):
    await state.set_state(MyForm.link)

    await query.message.edit_text(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–∑ –±–æ—Ç–∞ @PostBot –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n<pre>[@PostBot 65fa57561ccfa]</pre> \n<i><u>–≤–º–µ—Å—Ç–µ —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏</u></i>',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='button_spam_settings')],
        ])
        )
    

# –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å–ª—ã–∫–∏
@dp.callback_query(F.data == 'dell_lincks')
async def dell_lincks(query: CallbackQuery, state: FSMContext):
    links_manager.delete_all_links()
    await button_spam_settings(query, state)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É
@dp.message(MyForm.link)
async def link_save(message: Message, state: FSMContext):
    await message.delete()
    
    if message.text[:5] == 'https':
        messgae_split_space = message.text.split(' ')
        if len(messgae_split_space) == 1:
            message_split = message.text.split('/')
            msg_id = message_split[4]
            link = f'{message_split[0]}//{message_split[2]}/{message_split[3]}/'
            links_manager.insert_link(link=link, msg_id=int(msg_id), count_msg=200)

        if len(messgae_split_space) == 2:
            message_split = messgae_split_space[0].split('/')
            msg_id = message_split[4]
            link = f'{message_split[0]}//{message_split[2]}/{message_split[3]}/'
            links_manager.insert_link(link=link, msg_id=int(msg_id), count_msg=int(messgae_split_space[1]))

    if message.text[:6] == '[@Post':
        messgae_split_space = message.text.split(' ')
        if len(messgae_split_space) == 2:
            links_manager.insert_link(link=messgae_split_space[0][1:], msg_id=messgae_split_space[1][:-1], count_msg=200)

        if len(messgae_split_space) == 3:
            links_manager.insert_link(link=messgae_split_space[0][1:], msg_id=messgae_split_space[1][:-1], count_msg=int(messgae_split_space[2]))


    await message.answer(
        text='–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='button_spam_settings')],
        ])
        )

