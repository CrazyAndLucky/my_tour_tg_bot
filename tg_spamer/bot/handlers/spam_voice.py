from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from loader import dp, bot
from tg_spamer.functions import spam_voice
from tg_spamer.clients import config, accounts_manager



class MyCallback(CallbackData, prefix='spam'):
    step: str
    action: str


class MyForm(StatesGroup):
    voice_note = State()


# –ê—É–¥–∏–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == 'spam_voice')
async def prep_voice(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer_audio(audio=FSInputFile(path='tg_spamer/data/voice.mp3', filename='voice'))
    await query.message.answer(
        text='–ê—É–¥–∏–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ‚òùÔ∏è',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîÑ –ó–∞–º–µ–Ω–∏—Ç—å', callback_data=MyCallback(step='prep_voice', action='yes').pack())],
            [InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=MyCallback(step='prep_voice', action='no').pack())],
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='back')],
            ]),
        )


# –í—ã–±–æ—Ä: –∑–∞–ø–∏—Å—å –≤–æ–π—Å–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
@dp.callback_query(MyCallback.filter(F.step == 'prep_voice'))
async def await_voice(query: CallbackQuery, callback_data: MyCallback, state: FSMContext):
    action = callback_data.action
    if action == 'no':
        await confirm_voice(query=query)    
    else:
        await state.set_state(MyForm.voice_note)
        await query.message.delete()
        await query.message.answer(text='–ó–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–π—Å:', 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='stop_await_voice')],
            ])
        )


# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–π—Å–∞
@dp.callback_query(F.data == 'stop_await_voice')
async def note_voice(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await prep_voice(query)


# –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–π—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –µ–≥–æ
@dp.message(MyForm.voice_note, F.voice)
async def note_voice(message: Message, state: FSMContext):
    await state.clear()
    await bot.download(file=message.voice, destination='tg_spamer/data/voice.mp3')
    print('–°–æ—Ö—Ä–∞–Ω–∏–ª –≤–æ–π—Å')

    await confirm_voice(message=message)
    

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
async def confirm_voice(query: CallbackQuery = None, message: Message = None):
    accounts = accounts_manager.get_all_acc_info_by_status('–≥–æ—Ç–æ–≤')
    if accounts:
        text = '<b>‚¨áÔ∏è–†–ê–°–°–´–õ–ö–ê –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø‚¨áÔ∏è</b>\n'
        for account in accounts:
            text += f'| {account[0]} | –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π | {account[6]} |\n'


        dual_message = config.dual_message()
        if dual_message == 1:
            text += '\n–î–≤–æ–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ‚úÖ'
        else:
            text += '\n–î–≤–æ–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ‚ùå'


    if query:
        await query.message.answer(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=MyCallback(step='confirm_voice', action='yes').pack())],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=MyCallback(step='stop_confirm_voice', action='yes').pack())],
        ])
        )
    
    if message:
        await message.answer(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=MyCallback(step='confirm_voice', action='yes').pack())],
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=MyCallback(step='stop_confirm_voice', action='yes').pack())],
        ])
        )


# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(MyCallback.filter(F.step == 'stop_confirm_voice'))
async def send_voice(query: CallbackQuery, callback_data: MyCallback):
    await prep_voice(query)


# –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ–π—Å–∞
@dp.callback_query(MyCallback.filter(F.step == 'confirm_voice'))
async def send_voice(query: CallbackQuery, callback_data: MyCallback):
    print('–ù–∞—á–∏–Ω–∞—é')
    await query.message.delete()
    await query.message.answer(text='–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
    
    # –°–æ—Ö—Ä–∞–Ω—è—é —Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
    spam_accounts = accounts_manager.get_unique_id_by_status(status='–≥–æ—Ç–æ–≤')
    
    # –î–≤–æ–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    dual_send = config.dual_message()
    await spam_voice(dual_send)

    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–º
    text = f'<b>–ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É</b> | {config.get_count_send_msg()} |\n'
    for spam_account in spam_accounts:
        account_info = accounts_manager.get_acc_info_by_unique_id(spam_account)
        if account_info is None:
            text += '<i>–ó–∞–±–∞–Ω–µ–Ω</i>\n'
        else:
            text += f'<i>{spam_account}</i> - | {account_info[7]} |\n'

    # await query.message.answer(text=text)
    await query.message.answer_document(document=FSInputFile(path='tg_spamer/logs.txt'), caption=text)
