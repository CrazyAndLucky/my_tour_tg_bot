from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, Message, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from loader import dp, bot
from tg_spamer.clients import update_clients_list, accounts_manager, config
from tg_spamer.tools import numbers_in_emoji




class MyForm(StatesGroup):
    await_accounts_numbers_msg = State()
    await_count_msg = State()

class MyCallback(CallbackData, prefix='status'):
    action: str
    status: str


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.callback_query(F.data == 'change_count_message')
async def status_accounts_settings(query: CallbackQuery, state: FSMContext):
    # –î–æ—Å—Ç–∞–ª–∏ –∏–∑ –±–∞–∑—ã –∞–∫–∫–∞—É–Ω—Ç—ã
    new_accounts = accounts_manager.get_all_acc_info_by_status('–Ω–æ–≤—ã–π')
    prep_accounts = accounts_manager.get_all_acc_info_by_status('–ø—Ä–æ–≥—Ä–µ–≤')
    ready_accounts = accounts_manager.get_all_acc_info_by_status('–≥–æ—Ç–æ–≤')
    after_spam_accounts = accounts_manager.get_all_acc_info_by_status('–æ—Ç–ª–µ–∂–∫–∞')
    spam_block_accounts = accounts_manager.get_all_acc_info_by_status('—Å–ø–∞–º')
    no_proxy_accounts = accounts_manager.get_all_acc_info_by_status('–Ω–µ—Ç –ø—Ä–æ–∫—Å–∏')

    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (3 6 7), –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (5-10)'
    number = 0
    all_accounts = []

    text += '\n\n<b>–ù–û–í–´–ï</b>\n'
    for account in new_accounts:
        all_accounts.append(account[0])
        number += 1
        text += numbers_in_emoji(number)
        text += f' {account[0]}\n'

    text += '\n<b>–ü–†–û–ì–†–ï–í</b>\n'
    for account in prep_accounts:
        all_accounts.append(account[0])
        number += 1
        text += numbers_in_emoji(number)
        text += f' {account[0]} —Å–æ–æ–±—â–µ–Ω–∏—è | {account[6]} |\n'

    text += '\n<b>–ì–û–¢–û–í</b>\n'
    for account in ready_accounts:
        all_accounts.append(account[0])
        number += 1
        text += numbers_in_emoji(number)
        text += f' {account[0]} —Å–æ–æ–±—â–µ–Ω–∏—è | {account[6]} |\n'

    text += '\n<b>–û–¢–õ–ï–ñ–ö–ê</b>\n'
    for account in after_spam_accounts:
        all_accounts.append(account[0])
        number += 1
        text += numbers_in_emoji(number)
        text += f' {account[0]} —Å–æ–æ–±—â–µ–Ω–∏—è | {account[6]} |\n'

    text += '\n<b>–°–ü–ê–ú</b>\n'
    for account in spam_block_accounts:
        all_accounts.append(account[0])
        number += 1
        text += numbers_in_emoji(number)
        text += f' {account[0]} —Å–æ–æ–±—â–µ–Ω–∏—è | {account[6]} |\n'

    text += '\n<b>–ù–ï–¢ –ü–†–û–ö–°–ò</b>\n'
    for account in no_proxy_accounts:
        all_accounts.append(account[0])
        number += 1
        text += numbers_in_emoji(number)
        text += f' {account[0]} —Å–æ–æ–±—â–µ–Ω–∏—è | {account[6]} |\n'


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
    await state.set_state(MyForm.await_accounts_numbers_msg)
    await state.update_data(all_accounts=all_accounts)    
    await query.message.edit_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='spam_settings')]
        ])
    )


# –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(MyForm.await_accounts_numbers_msg)
async def proccess_take_numbers(message: Message, state: FSMContext):
    await message.delete()
    
    text = message.text
    # –î–æ—Å—Ç–∞–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    all_accounts = (await state.get_data())['all_accounts']
    
    edit_accounts = []
    if '-' in text:
        text_split = text.strip().split('-')
        try:
            number_1 = int(text_split[0])
            number_2 = int(text_split[1])
        
            edit_accounts = all_accounts[number_1 - 1:number_2]
        except Exception:
            pass

    else: 
        text_split = text.strip().split(' ')
        
        for acc_index in text_split:
            try:
                edit_accounts.append(all_accounts[int(acc_index) - 1])
            except Exception:
                pass


    text = '<b>–í—ã–±—Ä–∞–Ω–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã:</b>\n'
    for acc in edit_accounts:
        text += f'{acc}\n'
    text += '\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç'
    await state.set_state(MyForm.await_count_msg)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(edit_accounts=edit_accounts)

    await message.answer(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data='change_count_message')]
        ]) 
        )
    

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
@dp.message(MyForm.await_count_msg)
async def count_msg(message: Message, state: FSMContext):
    edit_accounts = (await state.get_data())['edit_accounts']
    for unique_id in edit_accounts:
        config._update_msg(unique_id=unique_id, value=int(message.text))
    
    await message.answer(
        text='–ü–æ–º–µ–Ω—è–ª –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='spam_settings')]
        ])                             
    )